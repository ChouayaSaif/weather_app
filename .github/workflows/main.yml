name: Docker Compose CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Step 1: Set up Docker and Docker Compose
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    # Step 2: Load environment variables
    - name: Load environment variables
      run: |
        echo "DB_NAME=weather_db_1" >> .env
        echo "DB_USER=user" >> .env
        echo "DB_PASSWORD=saifch" >> .env
        echo "DB_HOST=db" >> .env
        echo "DB_PORT=3306" >> .env

    # Step 3: Build the Docker image
    - name: Build the Docker image
      run: docker build -t my-weather-app .

    # Step 4: Run Docker Compose
    - name: Run Docker Compose
      run: docker-compose up -d

    # Step 5: Wait for the database to be ready
    - name: Wait for database
      run: |
        for i in {1..30}; do
          if docker-compose exec db mysql -h localhost -u user -psaifch -e "SELECT 1;" weather_db_1; then
            echo "Database is ready!"
            break
          else
            echo "Waiting for database to be ready..."
            sleep 2
          fi
        done

    # Step 6: Check if containers are running
    - name: Check if containers are running
      run: |
        docker-compose ps

    # Step 7: Run migrations
    - name: Run migrations
      run: docker-compose exec django-app python manage.py migrate

    # Step 8: Run tests
    - name: Run tests
      run: docker-compose exec django-app python manage.py test

    # Step 9: Tear down Docker Compose
    - name: Tear down Docker Compose
      if: always()
      run: docker-compose down