name: Docker Compose CI pipeline

# Disable the triggers by commenting them out
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# Optional: Add workflow_dispatch to allow manual triggering
on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Step 1: Set up Docker and Docker Compose
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    # Step 2: Load environment variables
    - name: Load environment variables
      run: |
        echo "DB_NAME=weather_db_1" >> .env
        echo "DB_USER=user" >> .env
        echo "DB_PASSWORD=saifch" >> .env
        echo "DB_HOST=db" >> .env
        echo "DB_PORT=3306" >> .env

    # Step 3: Build the Docker image
    - name: Build the Docker image
      run: docker build -t my-weather-app .

    # Step 4: Save the Docker image as an artifact
    - name: Save Docker image
      run: |
        mkdir -p ./docker-images
        docker save my-weather-app -o ./docker-images/my-weather-app.tar

    # Step 5: Upload the Docker image as an artifact
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: my-weather-app-image
        path: ./docker-images/my-weather-app.tar

    # Step 6: Run Docker Compose
    - name: Run Docker Compose
      run: docker-compose up -d

    # Step 7: Wait for the database to be ready
    - name: Wait for database
      run: |
        for i in {1..30}; do
          if docker-compose exec db mysql -h localhost -u user -psaifch -e "SELECT 1;" weather_db_1; then
            echo "Database is ready!"
            break
          else
            echo "Waiting for database to be ready..."
            sleep 2
          fi
        done

    # Step 8: Check if containers are running
    - name: Check if containers are running
      run: |
        docker-compose ps

    # Step 9: Run migrations
    - name: Run migrations
      run: docker-compose exec django-app python manage.py migrate

    # Step 10: Tear down Docker Compose
    - name: Tear down Docker Compose
      if: always()
      run: docker-compose down

  push-to-docker-hub:
    runs-on: ubuntu-latest
    needs: build-and-test  # Ensure this job runs after build-and-test
    steps:
    - uses: actions/checkout@v4

    # Step 1: Download the Docker image artifact
    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: my-weather-app-image
        path: ./docker-images

    # Step 2: Load the Docker image
    - name: Load Docker image
      run: |
        docker load -i ./docker-images/my-weather-app.tar

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Step 4: Tag the Docker image
    - name: Tag the Docker image
      run: |
        docker tag my-weather-app ${{ secrets.DOCKER_USERNAME }}/my-weather-app:latest

    # Step 5: Push the Docker image to Docker Hub
    - name: Push the Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/my-weather-app:latest